import sys
import os
from PyQt5 import QtWidgets, uic
import win32com.client

class PanelCreatorForm(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        ui_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'panel_creator_form.ui')
        uic.loadUi(ui_file, self)
        self.connectSignals()
        self.panel = None
        self.isolation = None

    def connectSignals(self):
        self.createPanelButton.clicked.connect(self.create_panel)
        self.createIsolationButton.clicked.connect(self.create_isolation)
        self.cutCornerButton.clicked.connect(self.cut_corner)
        self.createHoleButton.clicked.connect(self.create_hole)
        self.createCutoutButton.clicked.connect(self.create_rectangular_cutout)
        self.moveCutoutButton.clicked.connect(self.move_cutout)

    def create_panel(self):
        try:
            width = float(self.widthInput.text())
            height = float(self.heightInput.text())
            thickness = float(self.thicknessInput.text())
            x = float(self.xCoord.text())
            y = float(self.yCoord.text())
            z = float(self.zCoord.text())

            nanoCAD = win32com.client.Dispatch("NanoCAD.Application")
            doc = nanoCAD.ActiveDocument
            modelSpace = doc.ModelSpace

            panel_base_point = (x, y, z)
            self.panel = modelSpace.AddBox(panel_base_point, width, thickness, height)
            self.panel.Highlight(True)
            doc.Regen()

            print(f'Создана вертикальная панель размером {width}x{height}x{thickness} с основанием в точке {panel_base_point}')
        except Exception as e:
            self.show_error_message(f'Произошла ошибка при создании панели: {str(e)}')
        finally:
            if 'doc' in locals():
                doc = None
            if 'nanoCAD' in locals():
                nanoCAD = None

    def create_isolation(self):
        try:
            width = float(self.isolationWidthInput.text())
            height = float(self.isolationHeightInput.text())
            thickness = float(self.isolationThicknessInput.text())
            panel_thickness = float(self.thicknessInput.text())
            x = float(self.xCoord.text())
            y = float(self.yCoord.text())
            z = float(self.zCoord.text())

            nanoCAD = win32com.client.Dispatch("NanoCAD.Application")
            doc = nanoCAD.ActiveDocument
            modelSpace = doc.ModelSpace

            isolation_base_point = (x, y + panel_thickness, z)
            self.isolation = modelSpace.AddBox(isolation_base_point, width, thickness, height)
            self.isolation.Color = 4  # Светло-голубой цвет
            doc.Regen(1)

            print(f'Создана изоляция размером {width}x{height}x{thickness} за панелью')
        except Exception as e:
            self.show_error_message(f'Произошла ошибка при создании изоляции: {str(e)}')
        finally:
            if 'doc' in locals():
                doc = None
            if 'nanoCAD' in locals():
                nanoCAD = None

    def cut_corner(self):
        try:
            nanoCAD = win32com.client.Dispatch("NanoCAD.Application")
            doc = nanoCAD.ActiveDocument
            modelSpace = doc.ModelSpace

            cut_width = float(self.cutWidthInput.text())
            cut_length = float(self.cutLengthInput.text())
            target = self.cutTarget.currentText()

            if target == "Основная панель":
                panel_thickness = float(self.thicknessInput.text())
                panel = self.panel
            else:  # Изоляция
                panel_thickness = float(self.isolationThicknessInput.text())
                panel = self.isolation

            print(f"Укажите угол для подрезки в {target}:")
            cut_point = doc.Utility.GetPoint()

            offset_z = panel_thickness / 2
            adjusted_cut_point = (cut_point[0], cut_point[1], cut_point[2] - offset_z)

            cut_box = modelSpace.AddBox(adjusted_cut_point, 2*cut_width, 2*cut_length, panel_thickness)

            result = panel.Boolean(2, cut_box)
            doc.Regen(1)

            print(f'Выполнена подрезка угла размером {cut_width}x{cut_length} в {target}')
        except Exception as e:
            self.show_error_message(f'Произошла ошибка при подрезке угла: {str(e)}')
        finally:
            if 'doc' in locals():
                doc = None
            if 'nanoCAD' in locals():
                nanoCAD = None

    def create_hole(self):
        try:
            nanoCAD = win32com.client.Dispatch("NanoCAD.Application")
            doc = nanoCAD.ActiveDocument
            modelSpace = doc.ModelSpace

            diameter = float(self.holeDiameterInput.text())
            target = self.holeTarget.currentText()

            print(f"Укажите центр отверстия в {target}:")
            center_point = doc.Utility.GetPoint()

            cylinder = modelSpace.AddCylinder(center_point, diameter / 2, 1000)

            if target == "Основная панель":
                panel = self.panel
            else:  # Изоляция
                panel = self.isolation

            result = panel.Boolean(2, cylinder)
            doc.Regen(1)

            print(f'Создано отверстие диаметром {diameter} в {target} в точке {center_point}')
        except Exception as e:
            self.show_error_message(f'Произошла ошибка при создании отверстия: {str(e)}')
        finally:
            if 'doc' in locals():
                doc = None
            if 'nanoCAD' in locals():
                nanoCAD = None

    def create_rectangular_cutout(self):
        try:
            width = float(self.cutoutWidthInput.text())
            height = float(self.cutoutHeightInput.text())
            x = float(self.cutoutXInput.text())
            y = float(self.cutoutYInput.text())

            nanoCAD = win32com.client.Dispatch("NanoCAD.Application")
            doc = nanoCAD.ActiveDocument
            modelSpace = doc.ModelSpace

            if self.panel is None or self.isolation is None:
                raise ValueError("Панель или изоляция не созданы")

            cutout = modelSpace.AddBox((x, y, 0), width, height, 1000)
            self.panel.Boolean(2, cutout)
            self.isolation.Boolean(2, cutout)

            doc.Regen(1)
            print(f'Создан прямоугольный вырез размером {width}x{height} в позиции ({x}, {y})')
        except Exception as e:
            self.show_error_message(f'Произошла ошибка при создании выреза: {str(e)}')
        finally:
            if 'doc' in locals():
                doc = None
            if 'nanoCAD' in locals():
                nanoCAD = None

    def move_cutout(self):
        try:
            new_x = float(self.newCutoutXInput.text())
            new_y = float(self.newCutoutYInput.text())

            nanoCAD = win32com.client.Dispatch("NanoCAD.Application")
            doc = nanoCAD.ActiveDocument
            modelSpace = doc.ModelSpace

            # Здесь нужно реализовать логику перемещения выреза
            # Это может потребовать создания нового выреза и удаления старого

            doc.Regen(1)
            print(f'Вырез перемещен в новую позицию ({new_x}, {new_y})')
        except Exception as e:
            self.show_error_message(f'Произошла ошибка при перемещении выреза: {str(e)}')
        finally:
            if 'doc' in locals():
                doc = None
            if 'nanoCAD' in locals():
                nanoCAD = None

    def show_error_message(self, message):
        error_box = QtWidgets.QMessageBox()
        error_box.setIcon(QtWidgets.QMessageBox.Critical)
        error_box.setText("Произошла ошибка")
        error_box.setInformativeText(message)
        error_box.setWindowTitle("Ошибка")
        error_box.exec_()

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    window = PanelCreatorForm()
    window.show()
    sys.exit(app.exec_())
