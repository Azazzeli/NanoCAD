import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton
import win32com.client

class PanelCreatorForm(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        main_layout = QVBoxLayout()
        self.setLayout(main_layout)

        self.width_input = self.create_input_field("Ширина панели:")
        self.height_input = self.create_input_field("Высота панели:")
        self.thickness_input = self.create_input_field("Толщина панели:")

        main_layout.addLayout(self.width_input[0])
        main_layout.addLayout(self.height_input[0])
        main_layout.addLayout(self.thickness_input[0])

        create_panel_button = QPushButton('Создать панель')
        create_panel_button.clicked.connect(self.create_panel)
        main_layout.addWidget(create_panel_button)

        self.hole_diameter = self.create_input_field("Диаметр отверстия:")
        main_layout.addLayout(self.hole_diameter[0])

        create_hole_button = QPushButton('Добавить отверстие')
        create_hole_button.clicked.connect(self.create_hole)
        main_layout.addWidget(create_hole_button)

        self.setWindowTitle('Создание панели с отверстиями')
        self.show()

    def create_input_field(self, label):
        layout = QHBoxLayout()
        layout.addWidget(QLabel(label))
        input_field = QLineEdit()
        layout.addWidget(input_field)
        return layout, input_field

    def create_panel(self):
        width = float(self.width_input[1].text())
        height = float(self.height_input[1].text())
        thickness = float(self.thickness_input[1].text())

        try:
            nanoCAD = win32com.client.Dispatch("NanoCAD.Application")
            doc = nanoCAD.ActiveDocument
            modelSpace = doc.ModelSpace

            point = doc.Utility.GetPoint()
            panel = modelSpace.AddBox(point, width, height, thickness)
            doc.Regen(1)

            print(f"Создана панель размером {width}x{height}x{thickness} в точке {point}")
        except Exception as e:
            print(f"Произошла ошибка: {str(e)}")
        finally:
            if 'doc' in locals():
                doc = None
            if 'nanoCAD' in locals():
                nanoCAD = None

    def create_hole(self):
        try:
            nanoCAD = win32com.client.Dispatch("NanoCAD.Application")
            doc = nanoCAD.ActiveDocument
            modelSpace = doc.ModelSpace

            diameter = float(self.hole_diameter[1].text())
            
            print("Кликните в НаноКАД, чтобы указать центр отверстия...")
            point = doc.Utility.GetPoint()
            
            cylinder = modelSpace.AddCylinder(point, diameter/2, float(self.thickness_input[1].text()))
            
            panel = modelSpace.Item(modelSpace.Count - 2)
            
            result = panel.Boolean(2, cylinder)
            
            doc.Regen(1)
            print(f"Создано отверстие диаметром {diameter} в точке {point}")
        except Exception as e:
            print(f"Произошла ошибка при создании отверстия: {str(e)}")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = PanelCreatorForm()
    sys.exit(app.exec_())
