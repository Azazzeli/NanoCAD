import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton
import win32com.client
import pythoncom

class PipelineEditor(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()
        self.connectToNanoCAD()

    def initUI(self):
        self.setWindowTitle('Pipeline Editor')
        layout = QVBoxLayout()

        # Создаем поля ввода для каждого параметра
        self.fields = {}
        parameters = ['StartPoint', 'EndPoint', 'Diameter']
        for param in parameters:
            hbox = QHBoxLayout()
            hbox.addWidget(QLabel(param))
            self.fields[param] = QLineEdit()
            hbox.addWidget(self.fields[param])
            layout.addLayout(hbox)

        # Кнопка для применения изменений
        self.applyButton = QPushButton('Apply Changes')
        self.applyButton.clicked.connect(self.applyChanges)
        layout.addWidget(self.applyButton)

        self.setLayout(layout)

    def connectToNanoCAD(self):
        pythoncom.CoInitialize()
        self.ncad = win32com.client.Dispatch("nanoCAD.Application")
        self.doc = self.ncad.ActiveDocument
        self.pipeline = self.findPipeline()
        if self.pipeline:
            self.updateFields()

    def findPipeline(self):
        for obj in self.doc.ModelSpace:
            if hasattr(obj, 'ObjectName') and 'pipeline' in obj.ObjectName.lower():
                return obj
        return None

    def updateFields(self):
        if self.pipeline:
            self.fields['StartPoint'].setText(str(self.pipeline.StartPoint))
            self.fields['EndPoint'].setText(str(self.pipeline.EndPoint))
            self.fields['Diameter'].setText(str(self.pipeline.Diameter))

    def applyChanges(self):
        if self.pipeline:
            try:
                self.pipeline.StartPoint = eval(self.fields['StartPoint'].text())
                self.pipeline.EndPoint = eval(self.fields['EndPoint'].text())
                self.pipeline.Diameter = float(self.fields['Diameter'].text())
                self.doc.ModelUpdate()
                print("Changes applied successfully")
            except Exception as e:
                print(f"Error applying changes: {e}")

    def closeEvent(self, event):
        pythoncom.CoUninitialize()
        event.accept()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = PipelineEditor()
    ex.show()
    sys.exit(app.exec_())
